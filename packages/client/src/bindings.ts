// DO NOT MODIFY. This file was generated by Specta and is used to keep rspc internally type safe.
// Checkout the unit test 'export_internal_types' to see where this files comes from!

/**
 * Represents a unique identifier for a request.
 *
 * @internal
 */
export type RequestId = null | number | string

export type SubscriptionStop = { readonly input: RequestId }

export type NewOrOldInput = readonly [RequestId, unknown] | unknown

/**
 * Represents a request object with various methods.
 *
 * @internal
 */
export type Request = Readonly<
  | {
      method: 'query'
      params: { path: string; input: unknown }
    }
  | {
      method: 'mutation'
      params: { path: string; input: unknown }
    }
  | {
      method: 'subscription'
      params: { path: string; input: NewOrOldInput }
    }
  | { method: 'subscriptionStop'; params: SubscriptionStop | null }
> & { jsonrpc?: string | null; id?: RequestId }

/**
 * Represents a Typescript procedure file which is generated by the Rust code.
 * This code-generated Typescript file is how we can validate the types on the frontend match Rust.
 *
 * @internal
 */
export type ProcedureDef = Readonly<{
  key: string
  input: unknown
  result: unknown
}>

/**
 * Represents the inner structure of a request object.
 *
 * @internal
 */
export type RequestInner = Readonly<
  | {
      method: 'query'
      params: { path: string; input: unknown }
    }
  | {
      method: 'mutation'
      params: { path: string; input: unknown }
    }
  | {
      method: 'subscription'
      params: { path: string; input: NewOrOldInput }
    }
  | { method: 'subscriptionStop'; params: SubscriptionStop | null }
>

export type Response = Readonly<{
  id: string | number
  result:
    | {
        type: 'event' | 'response'
        data: unknown
      }
    | {
        type: 'error'
        data: {
          message: string
          code: number
        }
      }
}>
